(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{101:function(v,_,t){"use strict";t.r(_);var e=t(0),r=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"gva-manual（gva小白式使用说明书）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gva-manual（gva小白式使用说明书）"}},[v._v("#")]),v._v(" GVA-Manual（GVA小白式使用说明书）")]),v._v(" "),t("h2",{attrs:{id:"可以先看一遍视频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可以先看一遍视频"}},[v._v("#")]),v._v(" 可以先看一遍视频")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.bilibili.com/video/av413011289",target:"_blank",rel:"noopener noreferrer"}},[v._v("【开源项目教学】gin-vue-admin 2.0目录介绍和自动化开发模式（1010工作室出品）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://www.bilibili.com/video/av668469402",target:"_blank",rel:"noopener noreferrer"}},[v._v("【gin-vue-admin】06/07更新：UI美化，插件功能，自动化代码增加搜索条件 字段描述 结构体中文描述（1010工作室出品）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://www.bilibili.com/video/av328557270",target:"_blank",rel:"noopener noreferrer"}},[v._v("gin-vue-admin-2020-6-13直播分享会"),t("OutboundLink")],1),v._v("  （这个比较长，快进找重点）")]),v._v(" "),t("li",[t("a",{attrs:{href:"https://www.bilibili.com/video/av796356364",target:"_blank",rel:"noopener noreferrer"}},[v._v("【gin-vue-admin】V2.1.0大更新：增加字典管理，用户操作日志，从数据库一键创建CURD让自动化更加完善（1010工作室出品）"),t("OutboundLink")],1)])]),v._v(" "),t("h2",{attrs:{id:"大致了解项目结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大致了解项目结构"}},[v._v("#")]),v._v(" 大致了解项目结构")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("    ├─server  \t     （后端文件夹）\n    │  ├─api            （API）\n    │  ├─config         （配置包）\n    │  ├─core  \t        （內核）\n    │  ├─db             （数据库脚本）\n    │  ├─docs  \t        （swagger文档目录）\n    │  ├─global         （全局对象）\n    │  ├─initialiaze    （初始化）\n    │  ├─middleware     （中间件）\n    │  ├─model          （结构体层）\n    │  ├─resource       （资源）\n    │  ├─router         （路由）\n    │  ├─service         (服务)\n    │  └─utils\t        （公共功能）\n    └─web            （前端文件）\n        ├─public        （发布模板）\n        └─src           （源码包）\n            ├─api       （向后台发送ajax的封装层）\n            ├─assets\t（静态文件）\n            ├─components（组件）\n            ├─router\t（前端路由）\n            ├─store     （vuex 状态管理仓）\n            ├─style     （通用样式文件）\n            ├─utils     （前端工具库）\n            └─view      （前端页面）\n\n")])])]),t("hr"),v._v(" "),t("h2",{attrs:{id:"step1：数据库初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step1：数据库初始化"}},[v._v("#")]),v._v(" Step1：数据库初始化")]),v._v(" "),t("ol",[t("li",[v._v("在本地安装mysql数据库")]),v._v(" "),t("li",[v._v("将 server  → db → qmplus.sql 导入")])]),v._v(" "),t("h2",{attrs:{id:"step2：启动项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step2：启动项目"}},[v._v("#")]),v._v(" Step2：启动项目")]),v._v(" "),t("p",[v._v("GVA项目分为后端项目和前端项目两个。从GitHub上下载到的文件压缩包解压缩后，里边的server文件夹即后端项目文件夹，web文件夹即前端项目文件夹。")]),v._v(" "),t("h3",{attrs:{id:"后端项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端项目"}},[v._v("#")]),v._v(" 后端项目")]),v._v(" "),t("ul",[t("li",[v._v("用GoLand打开server文件夹")]),v._v(" "),t("li",[v._v("按需修改config.yaml中的七牛云、mysql等参数")]),v._v(" "),t("li",[v._v("进入GoLand的File → settings → Go → Go Modules，将 Environment 项的值设置为"),t("code",[v._v("GOPROXY=https://goproxy.cn/")])]),v._v(" "),t("li",[v._v("打开终端，位于目录"),t("code",[v._v("server/")])]),v._v(" "),t("li",[v._v("终端输入"),t("code",[v._v("go list")]),v._v("拉取依赖")]),v._v(" "),t("li",[v._v("终端输入"),t("code",[v._v("go get -u github.com/swaggo/swag/cmd/swag")]),v._v(" 安装swagger")]),v._v(" "),t("li",[v._v("终端输入"),t("code",[v._v("swag init")]),v._v(" 生成swagger自动化API文档")]),v._v(" "),t("li",[v._v("终端输入 "),t("code",[v._v("go run main.go")]),v._v(" 运行项目（或者用IDE右上Edit Config...配置一下go build）")])]),v._v(" "),t("h3",{attrs:{id:"前端项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端项目"}},[v._v("#")]),v._v(" 前端项目")]),v._v(" "),t("p",[v._v("前端是Vue项目，用vscode或者你喜欢的IDE比如WebStorm打开web文件夹，执行"),t("code",[v._v("npm install")]),v._v(" （或者cnpm或者使用代理）下载相关包，然后执行 "),t("code",[v._v("npm run serve")]),v._v(" 启动项目")]),v._v(" "),t("h2",{attrs:{id:"step3：生成一步到位代码包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step3：生成一步到位代码包"}},[v._v("#")]),v._v(" Step3：生成一步到位代码包")]),v._v(" "),t("p",[v._v("先自行设计业务基础结构体模型")]),v._v(" "),t("p",[v._v("点击左侧菜单中的  "),t("strong",[v._v("系统工具 → 代码生成器")]),v._v(" 用来生成相关代码。")]),v._v(" "),t("ul",[t("li",[v._v("Struct名称：即后台代码中 model 文件夹下的结构体文件中，结构体的名称，首字母大写。")]),v._v(" "),t("li",[v._v("tableName：数据库中生成的与结构体对应的数据表名。")]),v._v(" "),t("li",[v._v("Struct简称：用于结构体作为参数时的名称，以及路由 group 名称。这里一般与"),t("strong",[v._v("Stuct名称")]),v._v("对应，但是首字母小写。")]),v._v(" "),t("li",[v._v("Struct中文名称：作为自动api描述，也是左侧菜单显示时的默认菜单名。")]),v._v(" "),t("li",[v._v("文件名称：使用 xxx_xxx 形式命名。生成后端代码时，model下的文件名会用这里的命名。")]),v._v(" "),t("li",[v._v("自动创建api：选中，如果不选则不会自动创建api表，需要自己去api管理里面手动增加对应路由。")])]),v._v(" "),t("p",[v._v("如上参数填写完成后，就填写好了自动创建代码所需要的基本信息。然后点击  "),t("strong",[v._v("新增Field")]),v._v("  按钮，为数据表、struct结构体创建字段。")]),v._v(" "),t("ul",[t("li",[v._v("Field名称：struct结构体中的字段名称，首字母大写")]),v._v(" "),t("li",[v._v("Field中文名：对应struct结构体tag中的comment字段值，也是数据列表展示表格的表头名称。")]),v._v(" "),t("li",[v._v("FieldJSON：对应struct结构体tag中的json字段值。在使用struct对象调用某个字段时，使用“对象.json字段值”")]),v._v(" "),t("li",[v._v("数据库字段名：对应数据库中的字段名称")]),v._v(" "),t("li",[v._v("数据库字段描述：对应数据库中的列Comment值")]),v._v(" "),t("li",[v._v("Field数据类型：对应struct结构体中的字段类型")]),v._v(" "),t("li",[v._v("数据库字段类型：对应生成的数据表中的字段类型")]),v._v(" "),t("li",[v._v("数据库字段长度：对应生成的数据表中的字段长度")]),v._v(" "),t("li",[v._v("Field查询条件：用于实现该对象数据列表的条件查询")])]),v._v(" "),t("p",[v._v("创建好所有的field后，点击右下角  "),t("strong",[v._v("生成代码包")]),v._v("  按钮，会生成并下载一个文件压缩包。解压后会看到里面有个 autoCode 文件夹，autoCode 里的 te 文件夹为自动生成的后端代码，fe文件夹为自动生成的前端代码。")]),v._v(" "),t("ul",[t("li",[v._v("te文件夹 → 后端代码：\n"),t("ul",[t("li",[v._v("api 下的 "),t("code",[v._v(".go")]),v._v(" 文件放到后端项目中的 api → v1 下。")]),v._v(" "),t("li",[v._v("model 下的 "),t("code",[v._v(".go")]),v._v(" 文件放到后端项目中的 model 下。")]),v._v(" "),t("li",[v._v("request 下的 "),t("code",[v._v(".go")]),v._v(" 文件放到后端项目中的 model → request下。")]),v._v(" "),t("li",[v._v("router 下的 "),t("code",[v._v(".go")]),v._v(" 文件放到后端项目中的 router 下。")]),v._v(" "),t("li",[v._v("service 下的 "),t("code",[v._v(".go")]),v._v(" 文件放到后端项目中的 service 下。")])])]),v._v(" "),t("li",[v._v("fe文件夹 → 前端代码：\n"),t("ul",[t("li",[v._v("api 下的 "),t("code",[v._v(".js")]),v._v(" 文件放到前端项目中的 src>api 下。")]),v._v(" "),t("li",[v._v("table 下的 "),t("code",[v._v(".vue")]),v._v(" 文件放到前端项目中的  src → view → struct 简称文件夹（自建）下。")])])])]),v._v(" "),t("h2",{attrs:{id:"step4：注册路由和数据库表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step4：注册路由和数据库表"}},[v._v("#")]),v._v(" Step4：注册路由和数据库表")]),v._v(" "),t("p",[v._v("这两个操作都是在后端server项目中。")]),v._v(" "),t("h3",{attrs:{id:"注册路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册路由"}},[v._v("#")]),v._v(" 注册路由")]),v._v(" "),t("p",[v._v("进入 initialize → router.go 文件，在 "),t("code",[v._v('global.GVA_LOG.Info("router register success")')]),v._v(" 这行代码前插入一行 "),t("code",[v._v("router.InitStruct名称Router(ApiGroup)")]),v._v(" 。其中 "),t("code",[v._v("InitStruct名称Router")]),v._v(" 需要与 router 文件夹下对应 struct 结构体（上边step中创建出来的struct结构体）的 "),t("code",[v._v(".go")]),v._v(" 文件中的方法名保持一致。")]),v._v(" "),t("h3",{attrs:{id:"注册数据库表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注册数据库表"}},[v._v("#")]),v._v(" 注册数据库表")]),v._v(" "),t("p",[v._v("进入 initialize → db_table.go 文件，给 "),t("code",[v._v("db.AutoMigrate")]),v._v(" 方法添加 "),t("code",[v._v("model.struct名称{}")])]),v._v(" "),t("h2",{attrs:{id:"step5：配置目录菜单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step5：配置目录菜单"}},[v._v("#")]),v._v(" Step5：配置目录菜单")]),v._v(" "),t("p",[v._v("进入系统  超级管理员 → 菜单管理  菜单，点击  "),t("strong",[v._v("新增根菜单")]),v._v("  按钮，配置菜单信息。")]),v._v(" "),t("ul",[t("li",[v._v("路由name：对应进入列表显示页面时的访问路径")]),v._v(" "),t("li",[v._v("路由path：选中后边的“添加参数”后才可以输入，对应进入列表显示页面时访问路径后的参数*（没用过，目测是酱婶的）*")]),v._v(" "),t("li",[v._v("是否隐藏：是否在系统左侧目录菜单显示时，隐藏掉该目录菜单")]),v._v(" "),t("li",[v._v("父节点Id：该目录菜单的父级目录菜单。这里是自动填充的数据，不需要自己操作")]),v._v(" "),t("li",[v._v("文件路径：对应前端项目中 /view/struct简称文件夹（自建）/struct简称.vue 文件")]),v._v(" "),t("li",[v._v("展示名称：该目录菜单显示在系统左侧目录菜单中的名称")]),v._v(" "),t("li",[v._v("图标：该目录菜单显示在系统左侧目录菜单中的图标")]),v._v(" "),t("li",[v._v("排序标记：用于调整该目录菜单在系统左侧目录菜单中显示的上下位置*（我猜的）*")]),v._v(" "),t("li",[v._v("keepAlive：是否使用keepAlive缓存*（太菜了，虽然知道干嘛用但是几行字解释不了，如有需要，请自行百度）*")])]),v._v(" "),t("p",[v._v("以上配置好后，点击 "),t("strong",[v._v("确定")]),v._v(" 按钮，完成菜单配置。")]),v._v(" "),t("h2",{attrs:{id:"step6：配置后端接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step6：配置后端接口"}},[v._v("#")]),v._v(" Step6：配置后端接口")]),v._v(" "),t("p",[v._v("如果是自动生成的代码，这里接口会自动配置好。")]),v._v(" "),t("p",[v._v("如果是自己写的业务代码，这里需要配置好后端接口。进入系统 超级管理员 → api管理 菜单，点击 "),t("strong",[v._v("新增api")]),v._v(" 按钮，配置接口信息。")]),v._v(" "),t("ul",[t("li",[v._v("路径：就是接口路径，比如前端项目中 src → api → struct简称.js 每个方法里的 url")]),v._v(" "),t("li",[v._v("请求：根据接口实际选择即可")]),v._v(" "),t("li",[v._v("api分组：对应 struct 简称")]),v._v(" "),t("li",[v._v("api简介：对api的简要说明")])]),v._v(" "),t("p",[v._v("以上配置好后，点击 "),t("strong",[v._v("确定")]),v._v(" 按钮，完成接口配置。")]),v._v(" "),t("h2",{attrs:{id:"step7：配置角色权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step7：配置角色权限"}},[v._v("#")]),v._v(" Step7：配置角色权限")]),v._v(" "),t("p",[v._v("进入系统 超级管理员 → 角色管理 菜单，找到需要设置权限的角色，点击对应的 "),t("strong",[v._v("设置权限")]),v._v(" 按钮，配置角色相关权限。")]),v._v(" "),t("ul",[t("li",[v._v("角色菜单：勾选该角色可以访问的目录菜单")]),v._v(" "),t("li",[v._v("角色api：勾选该角色可以访问的接口")])]),v._v(" "),t("h2",{attrs:{id:"step8：完善新增表单弹窗-页面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step8：完善新增表单弹窗-页面"}},[v._v("#")]),v._v(" Step8：完善新增表单弹窗/页面")]),v._v(" "),t("p",[v._v("以上7个Steps后，我们可以在系统中看到我们所创建的结构体数据列表页面。目前，这个页面已经是可以实现 "),t("strong",[v._v("删除")]),v._v("、"),t("strong",[v._v("查询")]),v._v(" 功能了，"),t("strong",[v._v("新增")]),v._v("、"),t("strong",[v._v("修改")]),v._v(" 功能仍然需要我们自己完善一下弹窗表单。")]),v._v(" "),t("p",[v._v("进入系统 系统工具 → 表单生成器 菜单，根据自己的实际需求，将左侧组件拖拽至中间画布区域，并在右侧设置组件属性。")]),v._v(" "),t("ul",[t("li",[v._v("组件类型：默认是左侧选中的组件类型，这里还可以再进行调整")]),v._v(" "),t("li",[v._v("字段名：对应 Step3 中的 "),t("strong",[v._v("FieldJSON")]),v._v(" 字段")]),v._v(" "),t("li",[v._v("标题：即组件label")]),v._v(" "),t("li",[v._v("占位提示：。。。就是占位提示")]),v._v(" "),t("li",[v._v("……："),t("em",[v._v("剩下的我都没试，按需自行试用")])])]),v._v(" "),t("p",[v._v("把所有组件上边几个基本的组件属性填好以后，点击画布上方的 "),t("strong",[v._v("复制代码")]),v._v("  按钮，会出现一个弹窗，让我们选择 "),t("strong",[v._v("生成类型")]),v._v(" 是 页面 还是 弹窗。我用的时候选的页面，具体内容应该是没差的，这里选择哪个应该不影响我们目前的需求。然后点击 "),t("strong",[v._v("确定")]),v._v(" 按钮，就成功复制到了我们的表单代码。")]),v._v(" "),t("p",[v._v("接下来，")]),v._v(" "),t("ul",[t("li",[v._v("随便找个记事本或者地方，把代码复制到里边。")]),v._v(" "),t("li",[v._v("在复制出来的代码中，取出 "),t("code",[v._v("<el-form>……</el-form>")]),v._v(" 部分代码，覆盖掉前端项目中 src → view → struct 简称文件夹（自建） → struct简称.vue 中 "),t("code",[v._v("此处请使用表单生成器生成form填充 表单默认绑定 formData 如手动修改过请自行修改key")]),v._v(" 这句话。")]),v._v(" "),t("li",[v._v("在复制出来的代码中，把 js 部分"),t("code",[v._v("data")]),v._v("方法里返回的对象复制到前端项目中，上边提及的 .vue 文件的 js 部分 "),t("code",[v._v("data")]),v._v(" 方法的 "),t("code",[v._v("return")]),v._v(" 对象里。（"),t("em",[v._v("这里表述有点乱。。但是前端一看代码就明白了。。。）")])])]),v._v(" "),t("h2",{attrs:{id:"finish"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#finish"}},[v._v("#")]),v._v(" Finish")]),v._v(" "),t("p",[v._v("至此，一个单表基本业务结构体的数据列表显示，单表数据增加、删除、查找、更新功能全部搞定。")])])}),[],!1,null,null,null);_.default=r.exports}}]);